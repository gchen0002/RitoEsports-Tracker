# Rito Esports Tracker - Project Overview

## Phase 1: Frontend Foundation (Complete)

- **Objective:** Create a basic, functional Chrome Extension skeleton.
- **Tech Stack:** Vanilla TypeScript, HTML, CSS.
- **Status:** Complete. The extension loads successfully in Chrome.

## Phase 2: Backend Infrastructure (Complete)

- **Objective:** Deploy a serverless backend on AWS to serve schedule data.
- **Tech Stack:** AWS CDK (TypeScript), AWS Lambda, API Gateway, DynamoDB.
- **Status:** Complete. The core infrastructure is deployed.

## Phase 3: Connecting Frontend and Backend (Complete)

- **Objective:** Make the Chrome Extension fetch and display data from the deployed backend API.
- **Steps Taken:**
  1.  Updated `chrome-extension/src/popup.ts` to fetch from the deployed API Gateway URL.
  2.  Implemented logic to parse the JSON response and dynamically create HTML to display the schedule.
  3.  Added basic loading and error-handling states.
- **Status:** Complete. The frontend now correctly displays data served by the backend.

## Phase 4: Live Data Implementation (Complete)

- **Objective:** Replace mock backend data with real, live data from a reliable source.
- **Summary:** The initial approach of web scraping Liquipedia proved unreliable due to anti-bot measures. We pivoted to a much more stable API-based approach.
- **Steps Taken:**
  1.  Identified PandaScore as the best API for our needs (covering both LoL and Valorant).
  2.  Created a `.env` file in the backend to securely store the user's PandaScore API key, and added this file to `.gitignore`.
  3.  Installed `dotenv` to load the secret key during deployment.
  4.  Created a new `DataFetcherLambda` function responsible for calling the PandaScore API.
  5.  Updated the original `ScheduleLambda` to read from the DynamoDB table instead of returning mock data.
  6.  Debugged and resolved several API issues, correcting the API base URL and endpoint paths.
- **Status:** Complete. The `DataFetcherLambda` successfully populates the DynamoDB table with live data.

## Phase 5: Automation (Complete)

- **Objective:** Automate the data-fetching process so it runs without manual intervention.
- **Steps Taken:**
  1.  Added an Amazon EventBridge rule to the `backend-stack.ts`.
  2.  Configured the rule to trigger the `DataFetcherLambda` on a recurring schedule.
  3.  Updated the schedule to run every 15 minutes as per user request (with a note about API limits).
- **Status:** Complete. The project is now fully automated. 